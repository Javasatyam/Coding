package testcases;
import java.io.InputStream;
import java.lang.reflect.Method;

import org.json.JSONObject;
import org.json.JSONTokener;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import base.BasePage;
import base.BaseTest;
import pages.DashboardPage;
import pages.LoginPage;
import pages.Logpage_orange;
import pages.RoutePage;


public class LoginTestorange extends BaseTest {

	
	Logpage_orange loginPage;
	DashboardPage homePage;
	RoutePage routePage;
	JSONObject loginUsers;

	  @BeforeClass
	  public void beforeClass() throws Exception {
			InputStream datais = null;
		  try {
			  String dataFileName = "excel/loginUsers.json";
			  datais = getClass().getClassLoader().getResourceAsStream(dataFileName);
			  JSONTokener tokener = new JSONTokener(datais);
			  loginUsers = new JSONObject(tokener);
		  } catch(Exception e) {
			  e.printStackTrace();
			  throw e;
		  } finally {
			  if(datais != null) {
				  datais.close();
			  }
		  }
		
	  }
	
	 @BeforeMethod
	  public void beforeMethod(Method m) {
		
		  loginPage = new Logpage_orange(driver);
			routePage = new RoutePage(driver);
	  }
	
	 
	  @Test(priority=0)
	  public void EnteringthePassword() throws Exception {
		       
		   
		       loginPage.clearTextBox(loginPage.username);
		       loginPage.enterUserEmail(loginUsers.getJSONObject("validUser").getString("email"));
		       loginPage.pressLoginBtn();
			   String expectedPasswordlValidation = strings.get("PasswordValidationMsg");
			   String actualPasswordValidation = loginPage.getErrTxt(loginPage.passwordErrmassage,"Verfied Password validation Text");
			   
			   
			  String expectedPasswordValidation = strings.get("PasswordValidationMsg");
			  Assert.assertEquals(actualPasswordValidation, expectedPasswordlValidation);
			  
			   
//			  Assert.assertEquals(actualPasswordValidation, expectedPasswordValidation);
			
		  }
	  @Test(priority=1)
	  public void testInvalidEmail() throws Exception {
		  loginPage.clearTextBox(loginPage.username);
		  loginPage.enterUserEmail(loginUsers.getJSONObject("invalidEmail").getString("email"));
		  loginPage.enterPassword(loginUsers.getJSONObject("validUser").getString("password"));
		  loginPage.pressLoginBtn();
		  String actualErrTxt = loginPage.getErrTxt(loginPage.InvalidMassageError, "InvalidEmail and Password verification");
		  String expectedErrTxt = strings.get("InvalidEmailMassage");
		  Assert.assertEquals(actualErrTxt, expectedErrTxt);
	
  }
	  @Test(priority=2)
	  public void testInvalidPassword() throws Exception {
		  loginPage.clearTextBox(loginPage.username);
		  loginPage.enterUserEmail(loginUsers.getJSONObject("validUser").getString("email"));
		  loginPage.enterPassword(loginUsers.getJSONObject("invalidEmail").getString("password"));
		  loginPage.pressLoginBtn();
		  String actualErrTxt = loginPage.getErrTxt(loginPage.InvalidMassageError, "InvalidEmail and Password verification");
		  String expectedErrTxt = strings.get("InvalidEmailMassage");
		  Assert.assertEquals(actualErrTxt, expectedErrTxt);
	  }
	  @Test(priority=4)
	  public void testValidUser() throws Exception {
		
		  loginPage.ImplicitWait();
		  loginPage.clearTextBox(loginPage.username);
	     loginPage.enterUserEmail(loginUsers.getJSONObject("validUser").getString("email"));
	     loginPage.enterPassword(loginUsers.getJSONObject("validUser").getString("password"));

		  loginPage.pressLoginBtn();
		  Thread.sleep(2000);
		  String actualErrTxt = routePage.getErrTxt(routePage.DashBoardHeader, "Checking Route Page Heading");
     	  String expectedErrTxt = strings.get("heading");
       	  Assert.assertEquals(actualErrTxt, expectedErrTxt);
		  
		
	  }
//	
//	  @Test(priority=3)
//	    public void testForgottenPasswordElement() {
//	        // Verify the presence and visibility of all elements on the change login screen
//	        Assert.assertTrue(loginPage.isForgottenPasswordDisplayed());
//	        
//	    }
	   
	    
	  @Test(priority=3)
	  public void testForgotPasswordLinkTest() {
		  loginPage.pressForgotPasswordPageButtonForForgotPasswordPage();
	      String expectedUrl = "https://opensource-demo.orangehrmlive.com/web/index.php/auth/requestPasswordResetCode";
	      String actualUrl = driver.getCurrentUrl();
	      Assert.assertEquals(actualUrl, expectedUrl, "Forgot password link redirection failed!");
	      driver.navigate().back();
	  }
	 
//	  

//	  
}
